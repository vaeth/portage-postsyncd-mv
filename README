portage-postsyncd-mv
postsync hooks for portage to sync from git

(C) Martin VÃ¤th <martin at mvath.de>
This project is under the GPL-2 license

This project provides several files which can be used for syncing with
portage via git or github.

The problem when syncing via git is that several files like the metadata cache,
the news announcements, the GLSAs, dtd, xml-schema, and project.xml files
are not modified and must be updated/fetched independently.

This project is loosely inspired by
	https://github.com/hasufell/portage-gentoo-git-config
but it aims to be much more flexible and configurable.

Moreover, it aims to be more secure, since root permissions are dropped
as soon as possible.

These scripts will work no matter whether you use git syncing or not:
When you do not sync from git, a lot of tasks will be skipped, automatically.


Installation:

Emerge the app-portage/portage-postsyncd-mv ebuild from the mv overlay.
Alternatively, copy all files from the subdirectories to their corresponding
location in the main file system.


Configuration:

Change all permissions of your repositories to a (relatively)
unprivileged user (e.g. "portage") and specify that user in the
variable POSTSYNC_USER in /etc/portage/make.conf
(if you omit the latter, the user "portage" will be used).

If you use app-portage/portage-utils, it is recommended to call

	chmod a-x /etc/portage/repo.postsync.d/q-reinit

In this way, this script will be executed at a more appropriate time
and with more explicit output by etc/portage/repo.postsync.d/??-q-reinit
However, the latter script is careful to not do anything if you have
not executed the command - nothing bad will happen.

Of course, it is also possible to switch off the executable bits of some
files of this project in etc/portage/repo.postsync.d/*
Then, of course, the corresponding functionality will be switched off.
The project is written in such a way that this is not harmful.
(Switching off the egencache functionality for the main repository is a
bad idea, however; if you do it manually you should update metadata/timestamp.x
correspondingly as also the prefetch functionality uses that timestamp file.)

Finally, you can configure a lot of details through POSTSYNC_* variables
in your /etc/portage/make.conf. Read etc/portage/repo.postsync.d/README
for the available variables and their default values.

Except for calling egencache for your non-main repositories
(and q-reinit for all repositories), the scripts do nothing
unless you configure your main repository to be fetched via git.
The scripts recognize the latter by checking that the sync-uri
of your $POSTSYNC_MAIN_REPOSITORY ends with ".git"

This project does intentionally not include some configuration file
to force the latter, because it is up to the user whether he wants this.
If you want it, you must set up /etc/portage/repos.conf correspondingly.
For instance, you might have files with the content

/etc/portage/repos.conf/00-defaults.conf:

[DEFAULT]
main-repo = gentoo

/etc/portage/repos.conf/50-defaults.conf:

[gentoo]
location = /usr/portage
priority = 5000
auto-sync = yes
sync-type = git
sync-depth = 0
sync-uri = https://github.com/gentoo/gentoo.git

Here,
"location" is the path to the main (gentoo) repository,
"priority" determines the order of the main repository relative to the others,
"auto-sync" means that "eix-sync" will actually sync it,
"sync-type" means that git will be used for syncing.
"sync-depth" determines how long will be the history which you can see
with git; the value 0 means full history.
Specify sync-depth = 1 if you are not interested in any ChangeLogs:
This will need half of the disk space (or even less in some future).

However, the scripts in this project will also regularly recompress your
git history (with git-gc and related commands)  so that it needs less disk
space. The latter takes some time, of course. As mentioned above, read
etc/portage/repo.postsync.d/README to learn how to configure such details.

These scripts make use of some timestamps.
These are stored locally in the $location/local/timestamps directory
(which is created if it does not exist). Here $location is the path to
the (main) repository.
